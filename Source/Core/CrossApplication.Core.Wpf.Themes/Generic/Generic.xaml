<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:themes="clr-namespace:CrossApplication.Core.Wpf.Themes" xmlns:controls="clr-namespace:CrossApplication.Core.Wpf.Themes.Controls" xmlns:mahapps="http://metro.mahapps.com/winfx/xaml/controls" xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks" xmlns:converter="clr-namespace:CrossApplication.Core.Wpf.Themes.Converter">
  <DataTemplate x:Key="HamburgerMenuGlyphItem" DataType="{x:Type mahapps:HamburgerMenuGlyphItem}">
    <Grid Height="48">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="48" />
        <ColumnDefinition />
      </Grid.ColumnDefinitions>
      <iconPacks:PackIconMaterial Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center" Kind="{Binding Glyph, Converter={converter:StringToEnumConverter}}" />
      <TextBlock Grid.Column="1" VerticalAlignment="Center" FontSize="16" Foreground="White" Text="{Binding Label}" />
    </Grid>
  </DataTemplate>
  <Style x:Key="DefaultButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type themes:Colors}, ResourceId=TextColorKey}}" />
    <Setter Property="MinWidth" Value="75" />
    <Setter Property="Padding" Value="5,0" />
  </Style>
  <Style TargetType="{x:Type Button}" BasedOn="{StaticResource DefaultButtonStyle}" />
  <Style x:Key="DefaultTextBoxStyle" TargetType="{x:Type TextBox}">
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type themes:Colors}, ResourceId=TextColorKey}}" />
    <Setter Property="MinWidth" Value="80" />
  </Style>
  <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource DefaultTextBoxStyle}" />
  <Style TargetType="{x:Type controls:NavigationBar}">
    <Setter Property="FontSize" Value="20" />
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type themes:Colors}, ResourceId=NavigationBarBackgroundColorKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type controls:NavigationBar}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Border.Resources>
              <Style TargetType="ContentPresenter" x:Key="ItemContainerStyle">
                <Setter Property="Margin" Value="10,3" />
              </Style>
              <DataTemplate x:Key="BarItemTemplate">
                <ContentControl Content="{Binding}" />
              </DataTemplate>
              <DataTemplate x:Key="BarItemContextMenuTemplate">
                <ContentControl Tag="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:NavigationBar}, Path=ContextItems}" Content="...">
                  <ContentControl.Style>
                    <Style TargetType="ContentControl">
                      <Setter Property="ContextMenu">
                        <Setter.Value>
                          <ContextMenu ItemsSource="{Binding Path=PlacementTarget.Tag, RelativeSource={RelativeSource Self}}" />
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </ContentControl.Style>
                </ContentControl>
              </DataTemplate>
              <controls:NavigationBarTemplateSelector x:Key="NavigationBarTemplateSelector" />
            </Border.Resources>
            <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BarItems}" ItemTemplateSelector="{StaticResource NavigationBarTemplateSelector}" ItemContainerStyle="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ItemContainerStyle, TargetNullValue={StaticResource ItemContainerStyle}}">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel Orientation="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:NavigationBar}, Path=BarItemsOrientation}" IsItemsHost="True" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </ItemsControl>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultTextControlStyle" TargetType="{x:Type controls:TextControl}">
    <Setter Property="Focusable" Value="False" />
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type themes:Colors}, ResourceId=TextColorKey}}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <DockPanel>
            <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LabelText}" FontWeight="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LabelFontWeight}" DockPanel.Dock="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=LabelAlignment}" />
            <ContentPresenter Focusable="False" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Margin}" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
          </DockPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="LabelText" Value="{x:Null}">
        <Trigger.Setters>
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate>
                <ContentPresenter Focusable="False" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Margin}" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}" />
              </ControlTemplate>
            </Setter.Value>
          </Setter>
        </Trigger.Setters>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="{x:Type controls:TextControl}" BasedOn="{StaticResource DefaultTextControlStyle}" />
  <Style x:Key="ButtonHyperlinkStyle" TargetType="Button">
    <Setter Property="FontWeight" Value="Light" />
    <Setter Property="Cursor" Value="Hand" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ContentPresenter />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="Button">
              <ContentPresenter />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="TextControlCaptionStyle" TargetType="{x:Type controls:TextControl}" BasedOn="{StaticResource DefaultTextControlStyle}">
    <Setter Property="FontSize" Value="15" />
    <Setter Property="FontWeight" Value="Bold" />
  </Style>
  <Style x:Key="TextControlHintStyle" TargetType="{x:Type controls:TextControl}" BasedOn="{StaticResource DefaultTextControlStyle}">
    <Setter Property="Foreground" Value="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type themes:Colors}, ResourceId=HintTextColorKey}}" />
    <Setter Property="FontWeight" Value="SemiBold" />
  </Style>
</ResourceDictionary>